# Learning from a List
import random

def scores():
    if randomn == 0:
        if choose in [0, 1, 2]:
            xsc[0] += 3
        if choose in [3, 4, 5]:
            xsc[1] += 3
        if choose in [6, 7, 8]:
            xsc[2] += 3
        if choose in [0, 3, 6]:
            xsc[3] += 3
        if choose in [1, 4, 7]:
            xsc[4] += 3
        if choose in [2, 5, 8]:
            xsc[5] += 3
        if choose in [0, 4, 8]:
            xsc[6] += 3
        if choose in [2, 4, 6]:
            xsc[7] += 3
    else:
        if choose in [0, 1, 2]:
            osc[0] += 5
        if choose in [3, 4, 5]:
            osc[1] += 5
        if choose in [6, 7, 8]:
            osc[2] += 5
        if choose in [0, 3, 6]:
            osc[3] += 5
        if choose in [1, 4, 7]:
            osc[4] += 5
        if choose in [2, 5, 8]:
            osc[5] += 5
        if choose in [0, 4, 8]:
            osc[6] += 5
        if choose in [2, 4, 6]:
            osc[7] += 5

def print_board():
    count = 0
    for i in points:
        count += 1
        if count == 3 or count == 6:
            print(" ", i, " |")
            print("___________________")
        else:
            print(" ", i, " |", end="")
    print()

# Initialize learning data as an empty list
learning_data = []

restart = True
while restart:
    randomn = random.randint(0, 1)  # randomly choose who to start the game

    points = [0, 1, 2, 3, 4, 5, 6, 7, 8]
    n = [0, 1, 2, 3, 4, 5, 6, 7, 8]
    xsc = [0, 0, 0, 0, 0, 0, 0, 0]
    osc = [0, 0, 0, 0, 0, 0, 0, 0]
    x_moves = []  # Store the moves of X in the current game

    for j in range(9):
        print_board()
        if randomn == 0:
            print("X turn :")
        else:
            print("O turn :")
        print(xsc)
        print(osc)

        if randomn == 0:
            choose = int(input(f"enter your choice from {points}: "))
        else:
            # Learning mechanism: Check for previous winning patterns
            blocked = False
            for pattern in learning_data:
                if points[pattern[0]] == "X" and points[pattern[1]] == "X" and isinstance(points[pattern[2]], int):
                    choose = pattern[2]
                    blocked = True
                    print("O is blocking X's move based on learning!")
                    break
                if points[pattern[1]] == "X" and points[pattern[2]] == "X" and isinstance(points[pattern[0]], int):
                    choose = pattern[0]
                    blocked = True
                    print("O is blocking X's move based on learning!")
                    break
                if points[pattern[2]] == "X" and points[pattern[0]] == "X" and isinstance(points[pattern[1]], int):
                    choose = pattern[1]
                    blocked = True
                    print("O is blocking X's move based on learning!")
                    break

            if not blocked:
                choose = random.choice(n)

        if choose in n:
            n.remove(choose)
            if randomn == 0:
                x_moves.append(choose)  # Store the chosen move for X
            scores()
            if randomn == 0:
                points[choose] = "X"
                randomn = 1
            else:
                points[choose] = "O"
                randomn = 0
        else:
            print("This place is already taken. Please try again.")
            continue

        print(xsc)
        print(osc)

        if 9 in xsc:
            print("X wins")
            # Determine winning pattern and add to learning data
            if xsc[0] == 9:
                learning_data.append([0, 1, 2])
            if xsc[1] == 9:
                learning_data.append([3, 4, 5])
            if xsc[2] == 9:
                learning_data.append([6, 7, 8])
            if xsc[3] == 9:
                learning_data.append([0, 3, 6])
            if xsc[4] == 9:
                learning_data.append([1, 4, 7])
            if xsc[5] == 9:
                learning_data.append([2, 5, 8])
            if xsc[6] == 9:
                learning_data.append([0, 4, 8])
            if xsc[7] == 9:
                learning_data.append([2, 4, 6])
            break
        elif 15 in osc:
            print("O wins")
            break
        elif j == 8:
            print("draw")

    print_board()
    restart_input = input("If you want to continue the game, press Enter. Otherwise, type 'exit': ")
    if restart_input.lower() == "exit":
        restart = False
